#include <iostream>
#include <conio.h>
#include <windows.h>

/*

DEFAULT PIN IS 0000

*/

int main ()
{
	int length = 0,counter = 0, CurrentUserIndex = 0, numoption, numprocess,transfer, withdraw, deposit,transfercheck = 0, acccheck = 0, AccBalance[100];
	std::string pin, pincheck, pindata[100], accnum,accdata[100];
	char decision, holder;
	
	//Main
	MAIN:system("CLS");
	std::cout << "------------------------------------------------------Danix ATM System -------------------------------------------------" << "\n<1> Existing User" << "\n<2> New User" << "\n<3> Exit ATM System" << "\n\nPlease choose an option: ";
	std::cin >> numoption;
	
	//Switch Case for numoption
	switch (numoption)
	{
		case 1: 
			EXIST:system("CLS");
			if(CurrentUserIndex == 0)
			{
				std::cout << "------------------------------------------------------Danix ATM System -------------------------------------------------"  << "ERROR! No Existing Accounts FOUND\n" << "Returning you to Main Menu";
				Sleep(3000);
				goto MAIN;
			}
			else
			{
				std::cout << "------------------------------------------------------Danix ATM System -------------------------------------------------"  << "Please Enter your Account Number (9 digits): ";
				std::cin >> accnum;
				length = 0;
				system("CLS");
				while(accnum[length] != '\0')
				{
					++length;
				}
				switch (length)
				{
					case 9:
						counter = 0;
						while (counter != 9)
						{
							if (isdigit(accnum[counter])) //input contains digits ONLY
							{
								counter++;
							}
							else //input contains invalid characters 
							{
								std::cout << "------------------------------------------------------Danix ATM System -------------------------------------------------"  << "ERROR! Please input digits ONLY\n";
								system ("pause");
								goto EXIST;
							}		
						}
						break;
					default:
						std::cout << "------------------------------------------------------Danix ATM System -------------------------------------------------"  << "ERROR! Please input exactly 9-digits\n";
						system("pause");
						goto EXIST;	
						break;
				}
				acccheck = 0;
				while (accnum !=  accdata[acccheck] && acccheck < 99)	
				{
					acccheck++;
				}
				if (accnum == accdata[acccheck])
				{
					goto PINEXIST;
				}
				else 
				{
					RETRYACC:system("CLS");
					std::cout << "------------------------------------------------------Danix ATM System -------------------------------------------------"  << "WRONG Account Number entered! Would you like to try again? (Y/N): ";
					std::cin >>  decision;
					if (decision == 'Y')
					{
						goto EXIST;
					}
					else if (decision == 'N')
					{
						goto MAIN;
					}
					else;
					{
						std::cout << "Please Input Y or N Only!\n";
						std::cin.clear();
						std::cin.ignore();
						goto RETRYACC;
					}		
				}		
				PINEXIST:system("CLS");
				std::cout << "------------------------------------------------------Danix ATM System -------------------------------------------------"  << "Please Enter your 4-digit PIN: ";
				pin = "\0";
				 do{
        				holder = getch();
       					switch(holder){
       					case 0:
           				getch();
       				    break;
      					case 13:
           				std::cout<<std::endl;
           				break;
       					case 8://backspace
            			if(pin.length()>0){
                		pin.erase(pin.end()-1);
                		std::cout<<holder <<' '<< holder;
           				}
           				break;
       					default:
           				pin += holder;
            			std::cout<<'*';
          				break;
       					}
       			}while(holder != 13);
				length = 0;
				while (pin[length] != '\0') 
    			{ 
      	 			 ++length; 
    			} 
				switch (length)
				{
					case 4:
					counter = 0;
					while (counter != 4)
					{
						if (isdigit(pin[counter])) //input contains digits ONLY
						{
							counter++;
						}
						else //input contains invalid characters 
						{
							std::cout << "ERROR! Please input digits ONLY\n";
							system ("pause");
							goto PINEXIST;
						}	
					}
					if (pin == pindata[acccheck])
					{
						goto MENU;
					}
					else 
					{
						RETRYPIN:system("CLS");
						std::cout << "------------------------------------------------------Danix ATM System -------------------------------------------------"  << "WRONG Pin Number entered! Would you like to try again? (Y/N): ";
						std::cin >>  decision;
						if (decision == 'Y')
						{
							goto PINEXIST;
						}
						else if (decision == 'N')
						{	
							goto MAIN;
						}
						else;
						{
							std::cout << "Please Input Y or N Only!\n";
							std::cin.clear();
							std::cin.ignore();
							goto RETRYPIN;
						}		
					break;
					}
					default:
				std::cout << "ERROR! Please input 4-digits ONLY\n";
				system("pause");
				goto PINEXIST;	
				break;
				}
		}
		case 2:
		if (CurrentUserIndex < 100)
		{
			NEWACC:system("CLS");
			std::cout << "------------------------------------------------------Danix ATM System -------------------------------------------------"  << "Please Enter your 9-digit Account Number: ";
			std::cin >> accnum;
			length = 0;
			while(accnum[length] != '\0')
			{
				++length;
			}
			switch (length)
			{
				case 9:
				counter = 0;
				while (counter != 9)
				{
					if (isdigit(accnum[counter])) //input contains digits ONLY
					{
						counter++;
					}
					else //input contains invalid characters 
					{
						std::cout << "ERROR! Please input digits ONLY\n";
						system ("pause");
						goto NEWACC;
					}		
				}
				break;
				default:
				std::cout << "ERROR! Please input exactly 9-digits\n";
				system("pause");
				goto NEWACC;	
				break;
			}
	
			acccheck = 0;
			while (accnum !=  accdata[acccheck] && acccheck < 99)	
			{
				acccheck++;
			}
			if (accnum == accdata[acccheck])
			{
				system("CLS");
				std::cout << "------------------------------------------------------Danix ATM System -------------------------------------------------"  << "The Account Already Exists! Please login using the \"Existing User\" option instead.\nReturning you to Main Menu...";
				Sleep(2000);
				goto MAIN;
			}
			else 
			{							
			AccConfirm:system("CLS");
			std::cout << "------------------------------------------------------Danix ATM System -------------------------------------------------"  << "Your Account Number is: " << accnum << "\nIs this correct? (Y/N): ";
			std::cin >> decision; 
			if (decision == 'Y')
			{
				accdata[CurrentUserIndex] = accnum;
				goto DEFPIN;
			}
			else if (decision == 'N')
			{	
			goto NEWACC;
			}
			else;
			{
			std::cout << "Please Input Y or N Only!\n";
			std::cin.clear();
			std::cin.ignore();
			Sleep(1500);
			goto AccConfirm;
			}
			DEFPIN:system("CLS");
			std::cout << "------------------------------------------------------Danix ATM System -------------------------------------------------"  << "Please Enter DEFAULT 4-digit PIN: ";
			pin = "\0";
			do{
        		holder = getch();
       			switch(holder){
       			case 0:
         	 	getch();
      			case 13:
          		std::cout<<std::endl;
          		break;
       			case 8:
           		if(pin.length()>0){
            	pin.erase(pin.end()-1); 
            	std::cout<<holder <<' '<< holder;
        		}
           		break;
       			default:
           		pin += holder;
           		std::cout<<'*';
          		break;
       			}
       		}while(holder != 13);
			system("CLS");
			while (pin != "0000")
			{
				std::cout << "------------------------------------------------------Danix ATM System -------------------------------------------------"  << "ERROR! Your PIN is incorrect please try again.\n" << "Please Enter DEFAULT 4-digit PIN: ";
				pin = "\0";
				do{
        			holder = getch();
       				switch(holder){
       				case 0:
         	 		getch();
      				case 13:
          			std::cout<<std::endl;
          			break;
       				case 8:
           			if(pin.length()>0){
            			pin.erase(pin.end()-1); 
            			std::cout<<holder <<' '<< holder;
        			}
           			break;
       				default:
           			pin += holder;
           			std::cout<<'*';
          			break;
       				}
       			}while(holder != 13);
				system("CLS");
			}
			AGAIN:system("CLS");
			std::cout << "------------------------------------------------------Danix ATM System -------------------------------------------------"  << "Enter NEW PIN: ";
			pin = "\0";
			do{
        		holder = getch();
       			switch(holder){
       			case 0:
         		getch();
      			case 13:
          		std::cout<<std::endl;
          		break;
       			case 8:
           		if(pin.length()>0){
           			pin.erase(pin.end()-1); 
           			std::cout<<holder <<' '<< holder;
        		}
          		break;
       			default:
          		pin += holder;
          		std::cout<<'*';
          		break;
       			}
       		}while(holder != 13);
			length = 0;
			while(pin[length] != '\0')
			{
				++length;
			}
			switch (length)
			{
				case 4:
				counter = 0;
				while (counter != 4)
				{
					if (isdigit(pin[counter])) //input contains digits ONLY
					{
						counter++;
					}
					else //input contains invalid characters 
					{
						std::cout << "ERROR! Please input digits ONLY\n";
						system ("pause");
						goto AGAIN;
					}		
				}
				break;
				default:
				std::cout << "ERROR! Please input exactly 4-digits\n";
				system("pause");
				goto AGAIN;	
				break;
			}
			std::cout << "Re-enter NEW PIN: ";
			pincheck = "\0";
				do{
        			holder = getch();
       				switch(holder){
       				case 0:
         	 		getch();
      				case 13:
          			std::cout<<std::endl;
          			break;
       				case 8:
           			if(pincheck.length()>0){
            			pincheck.erase(pincheck.end()-1); 
            			std::cout<<holder <<' '<< holder;
        			}
           			break;
       				default:
           			pincheck += holder;
           			std::cout<<'*';
          			break;
       				}
       			}while(holder != 13);
			if (pin == pincheck)
			{
				pindata[CurrentUserIndex] = pin;
				AccBalance[CurrentUserIndex] = 2000;
				acccheck = CurrentUserIndex;
				CurrentUserIndex++;
				system("CLS");
			}
			else 
			{
				std::cout << "\nERROR! PIN did not match, Please try Again!";
				Sleep(2000);
				goto AGAIN;
			}
		}
	}
		else
		{
		std::cout << "Maximum numbers of Account Reached!\nReturning you to Main Menu...";
		Sleep(2000);
		}
	break;
	case 3:
	system("CLS");
	std::cout << "------------------------------------------------------Danix ATM System -------------------------------------------------"  << "Thank your for using the Danix ATM System!\nTerminating Program...";
	Sleep(2000);
	return 0;
	break;
	default:
	std::cout << "Please input digits (1-3) ONLY";
	std::cin.clear();
	std::cin.ignore();
	Sleep(2000);
	goto MAIN;
	break;
	}

	MENU:system ("CLS");

	std::cout << "------------------------------------------------------Danix ATM System -------------------------------------------------" << "Please choose your desired process\n" "[1] Cash Withdrawal\n" << "[2] Cash Deposit\n" << "[3] Balance Inquiry\n" << "[4] Funds Transfer\n" << "[5] Change Pin\n" << "[6] Return to Main Menu" << "\n\nPlease Select an option: ";

	std::cin >> numprocess;

	switch(numprocess)
	{
		case 1:
		system("CLS");
		std::cout << "------------------------------------------------------Danix ATM System -------------------------------------------------"  << "Specify Amount to Withdraw (Minimum 200 Pesos): ";
		std:: cin >> withdraw;
		if (withdraw < 200)
		{
			std::cout << "ERROR! Minimum amount to withdraw is 200, returning you to Main Menu...";
			Sleep(1500);
			goto MENU;
		}
		else
		{
			if(withdraw > AccBalance[acccheck])
			{
				std::cout << "ERROR! Insufficient Balance.\nReturning you to Main Menu...";
				Sleep(1500);
				goto MENU;
			}
			else
			{
				AccBalance[acccheck] = AccBalance[acccheck] - withdraw;
				WRESULT:std::cout << "Cash Withdrawal Succesful!\nYour new Balance is: " << AccBalance[acccheck] << "\n\nWould you like to make another transaction? (Y/N): ";
				std::cin >>  decision;
				if (decision == 'Y')
				{
					goto MENU;
				}
					else if (decision == 'N')
				{
					goto MAIN;
				}
				else
				{
					std::cout << "Please Input Y or N Only!\n";
					std::cin.clear();
					std::cin.ignore();
					Sleep(1000);
					goto WRESULT;
					}			
			}
		}	
		break;
		case 2:
		system("CLS");
		std::cout << "------------------------------------------------------Danix ATM System -------------------------------------------------"  << "Specify Amount to Deposit (Minimum 100 Pesos): ";
		std:: cin >> deposit;
		if (deposit < 100)
		{
			std::cout << "ERROR! Minimum amount to deposit is 100, returning you to Main Menu...";
			Sleep(1500);
			goto MENU;
		}
		else
		{
			AccBalance[acccheck] = AccBalance[acccheck] + deposit;
			DRESULT:std::cout << "Cash Deposit Succesful!\nYour new Balance is: " << AccBalance[acccheck] << "\n\nWould you like to make another transaction? (Y/N): ";
			std::cin >>  decision;
			if (decision == 'Y')
			{
				goto MENU;
			}
			else if (decision == 'N')
			{
				goto MAIN;
			}
				else;
			{
				std::cout << "Please Input Y or N Only!\n";
				std::cin.clear();
				std::cin.ignore();
				Sleep(1000);
				goto DRESULT;
			}
		}
		break;
		case 3:
		BALANCE:system("CLS");
		std::cout << "------------------------------------------------------Danix ATM System -------------------------------------------------"  << "Your current balance is: " << AccBalance[acccheck] << "\n\nWould you like to make another transaction? (Y/N): ";
		std::cin >>  decision;
		if (decision == 'Y')
		{
			goto MENU;
		}
		else if (decision == 'N')
		{
			goto MAIN;
		}
		else;
		{
			std::cout << "Please Input Y or N Only!\n";
			std::cin.clear();
			std::cin.ignore();
			Sleep(1000);
			goto BALANCE;
		}			
		break;
		case 4:
		system("CLS");
		std::cout << "------------------------------------------------------Danix ATM System -------------------------------------------------"  << "Specify Amount to Transfer (Minimum 200 Pesos): ";
		std:: cin >> transfer;
		if (transfer < 200)
		{
			std::cout << "ERROR! Minimum amount to transfer is 200, returning you to Main Menu...";
			Sleep(1500);
			goto MENU;
		}
		else
		{
			if(transfer > AccBalance[acccheck])
			{
				std::cout << "ERROR! Insufficient Balance.\nReturning you to Main Menu...";
				Sleep(1500);
				goto MENU;
			}
			else
			{
				std::cout <<"Specify the Account Number to transfer the funds to (9-Digits): ";
				std::cin >> accnum;
				while(accnum[length] != '\0')
				{
					++length;
				}
				switch (length)
				{
					case 9:
						counter = 0;
						while (counter != 9)
						{
							if (isdigit(accnum[counter])) //input contains digits ONLY
							{
								counter++;
							}
							else //input contains invalid characters 
							{
								std::cout << "ERROR! Please input digits ONLY\n";
								system ("pause");
								goto EXIST;
							}		
						}
						break;
					default:
						std::cout << "ERROR! Please input exactly 9-digits\n";
						system("pause");
						goto EXIST;	
						break;
				}
				transfercheck = 0;
				while (accnum !=  accdata[transfercheck] && transfercheck < 99)	
				{
					transfercheck++;
				}
				if (accnum == accdata[transfercheck] && transfercheck != acccheck)
				{
					AccBalance[acccheck] = AccBalance[acccheck] - transfer;
					AccBalance[transfercheck] = AccBalance[transfercheck] + transfer;
					
					T1RESULT:std::cout << "Funds Transfer Successful!\nThe New Balance of Your Account (" << accdata[acccheck] << ") is: " << AccBalance[acccheck];
					std::cout << "\nThe New Balance of Account (" << accdata[transfercheck] << ") is: " << AccBalance[transfercheck]; 
					std::cout << "\n\nWould you like to make another transaction? (Y/N): ";
					std::cin >>  decision;
					if (decision == 'Y')
					{
						goto MENU;
					}
					else if (decision == 'N')
					{
						goto MAIN;
					}
						else;
					{
						std::cout << "Please Input Y or N Only!\n";
						std::cin.clear();
						std::cin.ignore();
						Sleep(1000);
						goto T1RESULT;
					}
				}
				else if (acccheck == transfercheck)
				{
					T2RESULT:std::cout << "ERROR! Cannot transfer funds to the same Account." << "\n\nWould you like to make another transaction? (Y/N): ";
					std::cin >>  decision;
					if (decision == 'Y')
					{
						goto MENU;
					}
					else if (decision == 'N')
					{
						goto MAIN;
					}
						else;
					{
						std::cout << "Please Input Y or N Only!\n";
						std::cin.clear();
						std::cin.ignore();
						Sleep(1000);
						goto T2RESULT;
					}
				}
				else
				{
				T3RESULT:std::cout << "ERROR! Account not found." << "\n\nWould you like to make another transaction? (Y/N): ";
					std::cin >>  decision;
					if (decision == 'Y')
					{
						goto MENU;
					}
					else if (decision == 'N')
					{
						goto MAIN;
					}
						else;
					{
						std::cout << "Please Input Y or N Only!\n";
						std::cin.clear();
						std::cin.ignore();
						Sleep(1000);
						goto T3RESULT;
					}
				}
			}
		}			
		break;
		case 5:
		PINVERIFY:system("CLS");
		std::cout << "------------------------------------------------------Danix ATM System -------------------------------------------------"  << "Enter your current PIN: ";
		pin = "\0";
		do{
        	holder = getch();
       		switch(holder){
       		case 0:
         	getch();
      		case 13:
         	std::cout<<std::endl;
         	break;
       		case 8:
         	if(pin.length()>0){
           		pin.erase(pin.end()-1); 
          		std::cout<<holder <<' '<< holder;
        	}
         	break;
       		default:
         	pin += holder;
          	std::cout<<'*';
         	break;
       		}
       	}while(holder != 13);
		length = 0;
		while(pin[length] != '\0')
		{
			++length;
		}
		switch (length)
		{
			case 4:
			counter = 0;
			while (counter != 4)
			{
				if (isdigit(pin[counter])) //input contains digits ONLY
				{
					counter++;
				}
				else //input contains invalid characters 
				{
					std::cout << "ERROR! Please input digits ONLY\n";
					system ("pause");
					goto PINVERIFY;
				}		
			}
			break;
			default:
			std::cout << "ERROR! Please input exactly 4-digits\n";
			system("pause");
			goto PINVERIFY;	
			break;
		}
		if (pin != pindata[acccheck])
		{
			system("CLS");
			std::cout << "------------------------------------------------------Danix ATM System -------------------------------------------------"  << "The current PIN you've entered is incorrect. Logging you out...";
			Sleep(2000);
			goto MAIN;
		}
		else
		{
		NEWCHANGE:system("CLS");
		std::cout << "------------------------------------------------------Danix ATM System -------------------------------------------------"  << "Enter NEW PIN: ";
		pin = "\0";
		do{
       		holder = getch();
       		switch(holder){
       		case 0:
       		getch();
      		case 13:
       		std::cout<<std::endl;
   			break;
      		case 8:
           	if(pin.length()>0){
       			pin.erase(pin.end()-1); 
       			std::cout<<holder <<' '<< holder;
       		}
       		break;
       		default:
       		pin += holder;
       		std::cout<<'*';
       		break;
       		}
       	}while(holder != 13);
		length = 0;
		while(pin[length] != '\0')
		{
			++length;
		}
		switch (length)
		{
			case 4:
			counter = 0;
			while (counter != 4)
			{
				if (isdigit(pin[counter])) //input contains digits ONLY
				{
					counter++;
				}
				else //input contains invalid characters 
				{
					std::cout << "ERROR! Please input digits ONLY\n";
					system ("pause");
					goto NEWCHANGE;
				}		
			}
			break;
			default:
			std::cout << "ERROR! Please input exactly 4-digits\n";
			system("pause");
			goto NEWCHANGE;	
			break;
			}
			if (pin == pindata[acccheck])
			{
				ERRORCURRENT:system("CLS");
				std::cout << "------------------------------------------------------Danix ATM System -------------------------------------------------"  << "The new PIN you've entered is the same as your current PIN." << "\n\nWould you like to try again? (Y/N): ";
					std::cin >>  decision;
					if (decision == 'Y')
					{
						goto NEWCHANGE;
					}
					else if (decision == 'N')
					{
						goto MENU;
					}
						else;
					{
						std::cout << "Please Input Y or N Only!\n";
						std::cin.clear();
						std::cin.ignore();
						Sleep(1000);
						goto ERRORCURRENT;
					}
			}
			else
			{
			
				std::cout << "Re-enter NEW PIN: ";
				pincheck = "\0";
				do{
        			holder = getch();
       				switch(holder){
       				case 0:
         	 		getch();
      				case 13:
          			std::cout<<std::endl;
          			break;
       				case 8:
           			if(pincheck.length()>0){
            			pincheck.erase(pincheck.end()-1); 
            			std::cout<<holder <<' '<< holder;
        			}
           			break;
       				default:
           			pincheck += holder;
           			std::cout<<'*';
          			break;
       				}
       			}while(holder != 13);
				if (pin == pincheck)
				{
					pindata[acccheck] = pin;
					DONEPIN:system("CLS");
					std::cout << "PIN changed successfully!" << "\n\nWould you like to make another transaction? (Y/N): ";
					std::cin >>  decision;
					if (decision == 'Y')
					{
						goto MENU;
					}
					else if (decision == 'N')
					{
						goto MAIN;
					}
						else;
					{
						
						decision = '\0';
						Sleep(1000);
						goto DONEPIN;
					}
				}
				else 
				{
					system("CLS");
					std::cout << "------------------------------------------------------Danix ATM System -------------------------------------------------"  << "ERROR! PIN did not match, Please try Again!";
					Sleep(2000);
					goto NEWCHANGE;
				}	
			}
		}
		break;
		case 6:
		system("CLS");
		std::cout << "------------------------------------------------------Danix ATM System -------------------------------------------------"  << "Returning to Main Menu...";
		Sleep(1500);
		goto MAIN;
		break;
		default:
		std::cout << "Please input digits (1-6) ONLY";
		std::cin.clear();
		std::cin.ignore();
		Sleep(1500);
		goto MENU;
		break;
	}
}
